
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Target, TrendingUp, Calendar, Zap, CheckCircle, AlertCircle } from 'lucide-react';
import { EnhancedAutoGoalEngine } from '@/services/EnhancedAutoGoalEngine';
import { formatCurrency } from '@/lib/format-utils';
import { toast } from 'sonner';

interface AutoGoal {
  id: string;
  name: string;
  targetAmount: number;
  currentAmount: number;
  priority: 'High' | 'Medium' | 'Low';
  category: string;
  dueDate: Date;
  autoGenerated: boolean;
  description: string;
}

export function EnhancedAutoGoalDashboard() {
  const [autoGoals, setAutoGoals] = useState<AutoGoal[]>([]);
  const [fundingResult, setFundingResult] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadAutoGoals();
  }, []);

  const loadAutoGoals = async () => {
    try {
      setLoading(true);
      
      // Generate auto-goals based on current data
      const generatedGoals = await EnhancedAutoGoalEngine.generateAutoGoals();
      
      // Mock some additional goals for demo
      const mockGoals: AutoGoal[] = [
        {
          id: '1',
          name: 'Emergency Fund Top-up',
          targetAmount: 500000,
          currentAmount: 300000,
          priority: 'High',
          category: 'Emergency',
          dueDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
          autoGenerated: true,
          description: 'Maintain 6 months of expenses as emergency fund'
        },
        {
          id: '2',
          name: 'Child Education Fund',
          targetAmount: 2000000,
          currentAmount: 150000,
          priority: 'High',
          category: 'Education',
          dueDate: new Date(Date.now() + 5 * 365 * 24 * 60 * 60 * 1000),
          autoGenerated: true,
          description: 'Higher education funding for child'
        },
        {
          id: '3',
          name: 'Tax Saving Investment',
          targetAmount: 150000,
          currentAmount: 80000,
          priority: 'Medium',
          category: 'Tax',
          dueDate: new Date(Date.now() + 120 * 24 * 60 * 60 * 1000),
          autoGenerated: true,
          description: '80C tax saving investment for current FY'
        }
      ];

      setAutoGoals(mockGoals);
    } catch (error) {
      console.error('Error loading auto goals:', error);
      toast.error('Failed to load auto goals');
    } finally {
      setLoading(false);
    }
  };

  const executeFundingStrategy = async () => {
    try {
      const surplusAmount = 50000; // Mock surplus
      const result = await EnhancedAutoGoalEngine.executeFundingPriorityStack(surplusAmount);
      setFundingResult(result);
      toast.success('Funding strategy executed successfully');
    } catch (error) {
      console.error('Error executing funding strategy:', error);
      toast.error('Failed to execute funding strategy');
    }
  };

  const getProgressPercentage = (current: number, target: number) => {
    return Math.min((current / target) * 100, 100);
  };

  const getDaysRemaining = (dueDate: Date) => {
    const days = Math.ceil((dueDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
    return Math.max(days, 0);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'High': return 'text-red-600';
      case 'Medium': return 'text-yellow-600';
      case 'Low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  if (loading) {
    return <div className="flex justify-center items-center h-32">Loading auto goals...</div>;
  }

  const highPriorityGoals = autoGoals.filter(g => g.priority === 'High');
  const totalTargetAmount = autoGoals.reduce((sum, goal) => sum + goal.targetAmount, 0);
  const totalCurrentAmount = autoGoals.reduce((sum, goal) => sum + goal.currentAmount, 0);
  const overallProgress = (totalCurrentAmount / totalTargetAmount) * 100;

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Smart Goal Management</h1>
          <p className="text-muted-foreground">AI-powered goal recommendations and funding strategies</p>
        </div>
        <Button onClick={executeFundingStrategy} className="flex items-center gap-2">
          <Zap className="w-4 h-4" />
          Execute Auto-Funding
        </Button>
      </div>

      {/* High Priority Alert */}
      {highPriorityGoals.length > 0 && (
        <Alert className="border-red-200 bg-red-50">
          <AlertCircle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            {highPriorityGoals.length} high-priority goals need attention. Consider allocating funds soon.
          </AlertDescription>
        </Alert>
      )}

      {/* Overview Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Target className="w-4 h-4" />
              Active Goals
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{autoGoals.length}</div>
            <p className="text-sm text-muted-foreground">{autoGoals.filter(g => g.autoGenerated).length} AI-generated</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Target Amount</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(totalTargetAmount)}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Current Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(totalCurrentAmount)}</div>
            <Progress value={overallProgress} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Completion Rate</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{Math.round(overallProgress)}%</div>
            <p className="text-sm text-muted-foreground">Overall progress</p>
          </CardContent>
        </Card>
      </div>

      {/* Funding Result */}
      {fundingResult && (
        <Card className="border-green-200 bg-green-50">
          <CardHeader>
            <CardTitle className="text-green-800 flex items-center gap-2">
              <CheckCircle className="w-5 h-5" />
              Funding Strategy Executed
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-green-700">Total Allocated:</span>
                <p className="font-medium">{formatCurrency(50000 - (fundingResult.remainingSurplus || 0))}</p>
              </div>
              <div>
                <span className="text-green-700">Remaining Surplus:</span>
                <p className="font-medium">{formatCurrency(fundingResult.remainingSurplus || 0)}</p>
              </div>
            </div>
            {fundingResult.allocations && (
              <div className="mt-3">
                <span className="text-green-700 text-sm">Allocations:</span>
                <ul className="text-sm mt-1 space-y-1">
                  {Object.entries(fundingResult.allocations).map(([goal, amount]) => (
                    <li key={goal} className="flex justify-between">
                      <span>{goal}:</span>
                      <span className="font-medium">{formatCurrency(amount as number)}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Goals List */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Your Goals</h2>
        {autoGoals.map((goal) => {
          const progress = getProgressPercentage(goal.currentAmount, goal.targetAmount);
          const daysRemaining = getDaysRemaining(goal.dueDate);
          const isUrgent = daysRemaining < 90 && goal.priority === 'High';

          return (
            <Card key={goal.id} className={isUrgent ? 'border-red-200' : ''}>
              <CardContent className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h3 className="font-semibold text-lg">{goal.name}</h3>
                      <Badge variant="outline" className={getPriorityColor(goal.priority)}>
                        {goal.priority} Priority
                      </Badge>
                      <Badge variant="outline">{goal.category}</Badge>
                      {goal.autoGenerated && (
                        <Badge variant="secondary">AI Generated</Badge>
                      )}
                      {isUrgent && <Badge variant="destructive">Urgent</Badge>}
                    </div>
                    <p className="text-sm text-muted-foreground mb-3">{goal.description}</p>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div>
                    <span className="text-muted-foreground text-sm">Target Amount:</span>
                    <p className="font-medium text-lg">{formatCurrency(goal.targetAmount)}</p>
                  </div>
                  <div>
                    <span className="text-muted-foreground text-sm">Current Amount:</span>
                    <p className="font-medium text-lg">{formatCurrency(goal.currentAmount)}</p>
                  </div>
                  <div>
                    <span className="text-muted-foreground text-sm">Days Remaining:</span>
                    <p className={`font-medium text-lg ${isUrgent ? 'text-red-600' : ''}`}>
                      {daysRemaining} days
                    </p>
                  </div>
                </div>

                {/* Progress Bar */}
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span>Progress</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>

                {/* Due Date */}
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Calendar className="w-4 h-4" />
                  Due: {goal.dueDate.toLocaleDateString()}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
}
